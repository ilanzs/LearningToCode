/* autogenerated by Processing revision 1276 on 2021-09-10 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class QuickSort extends PApplet {

float[] nums;

 public void setup() {
  /* size commented out by preprocessor */;
  nums = new float[width];

  for (int i = 0; i < nums.length - 1; i++) {
    nums[i] = random(height);
  }
}

 public void draw() {
  background(0);
  for (int i = 0; i < nums.length - 1; i++) {
    stroke(255);
    line(i, height, i, nums[i]);
  }
  quickSort(nums, 0, nums.length - 1);
}

 public int quickSort(float[] arr, int start, int end) {
  if (start >= end) {
    return 0;
  }

  int index = partition(arr, start, end);
  quickSort(arr, start, index - 1);
  quickSort(arr, index + 1, end);
  return 0;
}

 public int partition(float[] arr, int start, int end) {
  int pivotIndex = start;
  float pivotValue = arr[end];
  for (int i = start; i < end; i++) {
    if (arr[i] < pivotValue) {
    swap(arr, i, pivotIndex);
    pivotIndex++;
    }
  }
 swap(arr, pivotIndex, end);
 return pivotIndex;
}

 public void swap(float[] arr, int a, int b) {
 float temp = arr[a];
 arr[a] = arr[b];
 arr[b] = temp;
}


  public void settings() { size(800, 500); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "QuickSort" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
